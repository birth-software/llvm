name: CI

on:
  pull_request:
  push:
    tags:
      - "**"
jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
      BIRTH_GITHUB_TARGETS: ${{ steps.generate-config.outputs.BIRTH_GITHUB_TARGETS }}
      BIRTH_CMAKE_BUILD_TYPES: ${{ steps.generate-config.outputs.BIRTH_CMAKE_BUILD_TYPES }}
      BIRTH_MACOS_IMAGE: ${{ steps.generate-config.outputs.BIRTH_LINUX_IMAGE }}
      BIRTH_LINUX_IMAGE: ${{ steps.generate-config.outputs.BIRTH_LINUX_IMAGE }}
      BIRTH_WINDOWS_IMAGE: ${{ steps.generate-config.outputs.BIRTH_WINDOWS_IMAGE }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Generate config
        id: generate-config
        uses: birth-software/github-config@v2
  build_llvm:
    needs: generate-config
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.generate-config.outputs.BIRTH_GITHUB_TARGETS) }}
        CMAKE_BUILD_TYPE: ${{ fromJSON(needs.generate-config.outputs.BIRTH_CMAKE_BUILD_TYPES) }}
    runs-on: ${{ matrix.os }}
    env:
      BIRTH_LINUX_IMAGE: ${{ needs.generate-config.outputs.BIRTH_LINUX_IMAGE }}
      BIRTH_MACOS_IMAGE: ${{ needs.generate-config.outputs.BIRTH_MACOS_IMAGE }}
      BIRTH_WINDOWS_IMAGE: ${{ needs.generate-config.outputs.BIRTH_WINDOWS_IMAGE }}
      CMAKE_STATIC_LIBRARY_PREFIX: lib
      CMAKE_STATIC_LIBRARY_SUFFIX: .a
    steps:
      - name: Maximize build space
        if: matrix.os == env.BIRTH_LINUX_IMAGE
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'
          remove-swapfile: 'true'
      - uses: actions/checkout@v4
      - uses: birth-software/github-setup@v2
      - name: Build
        shell: bash
        env:
          CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
        run: |
          set -eux
          ROOT_DIR=$(pwd)
          LLVM_BASENAME=llvm-$BIRTH_ARCH-$BIRTH_OS-$CMAKE_BUILD_TYPE
          INSTALL_DIRECTORY_PATH=$ROOT_DIR/$LLVM_BASENAME
          ZSTD_BUILD_DIR=build-zstd
          mkdir -p $ZSTD_BUILD_DIR
          cd $ZSTD_BUILD_DIR
          cmake $ROOT_DIR/zstd \
          -G Ninja \
          -DCMAKE_STATIC_LIBRARY_PREFIX=$CMAKE_STATIC_LIBRARY_PREFIX \
          -DCMAKE_STATIC_LIBRARY_SUFFIX=$CMAKE_STATIC_LIBRARY_SUFFIX \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          -DCMAKE_INSTALL_PREFIX="$INSTALL_DIRECTORY_PATH" \
          -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
          cmake --build . --target install
          cd $ROOT_DIR

          ZLIB_BUILD_DIR=build-zlib
          mkdir -p $ZLIB_BUILD_DIR
          cd $ZLIB_BUILD_DIR
          cmake $ROOT_DIR/zlib \
          -G Ninja \
          -DCMAKE_STATIC_LIBRARY_PREFIX=$CMAKE_STATIC_LIBRARY_PREFIX \
          -DCMAKE_STATIC_LIBRARY_SUFFIX=$CMAKE_STATIC_LIBRARY_SUFFIX \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          -DCMAKE_INSTALL_PREFIX="$INSTALL_DIRECTORY_PATH" \
          -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
          cmake --build . --target install
          cd $ROOT_DIR

          case $BIRTH_OS in
            windows) OPTIONAL_TRIPLE_ARG="-DLLVM_HOST_TRIPLE=$BIRTH_ARCH-pc-windows-msvc";;
            *) OPTIONAL_TRIPLE_ARG="";;
          esac
          case $BIRTH_OS in
            linux) USE_MOLD_OPT_ARG=-DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=mold" ;;
            *) USE_MOLD_OPT_ARG="" ;;
          esac

          LLVM_BUILD_DIR=build-llvm
          mkdir -p $LLVM_BUILD_DIR
          cd $LLVM_BUILD_DIR
          cmake $ROOT_DIR/llvm \
          -G Ninja \
          -DCMAKE_STATIC_LIBRARY_PREFIX=$CMAKE_STATIC_LIBRARY_PREFIX \
          -DCMAKE_STATIC_LIBRARY_SUFFIX=$CMAKE_STATIC_LIBRARY_SUFFIX \
          -DCMAKE_INSTALL_PREFIX="$INSTALL_DIRECTORY_PATH" \
          -DCMAKE_PREFIX_PATH="$INSTALL_DIRECTORY_PATH" \
          -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          $USE_MOLD_OPT_ARG \
          $OPTIONAL_TRIPLE_ARG \
          -DLLVM_ENABLE_PROJECTS="lld;clang" \
          -DLLVM_PARALLEL_LINK_JOBS=1 \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_ENABLE_BACKTRACES=OFF \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
          -DLLVM_ENABLE_LIBEDIT=OFF \
          -DLLVM_ENABLE_LIBPFM=OFF \
          -DLLVM_ENABLE_LIBXML2=OFF \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_PLUGINS=OFF \
          -DLLVM_ENABLE_TERMINFO=OFF \
          -DLLVM_ENABLE_Z3_SOLVER=OFF \
          -DLLVM_ENABLE_ZLIB=ON \
          -DLLVM_ENABLE_ZSTD=ON \
          -DLLVM_USE_STATIC_ZSTD=ON \
          -DLLVM_BUILD_UTILS=OFF \
          -DLLVM_BUILD_TOOLS=OFF \
          -DLLVM_BUILD_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TOOLS=ON \
          -DLLVM_INCLUDE_UTILS=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_BENCHMARKS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
          -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
          -DLLVM_TOOL_LTO_BUILD=OFF \
          -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
          -DLLD_BUILD_TOOLS=OFF \
          -DLIBCLANG_BUILD_STATIC=ON \
          -DCLANG_ENABLE_ARCMT=ON \
          -DCLANG_BUILD_TOOLS=OFF \
          -DCLANG_BUILD_EXAMPLES=OFF \
          -DCLANG_INCLUDE_DOCS=OFF \
          -DCLANG_INCLUDE_TESTS=OFF \
          -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
          -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF \
          -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
          -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
          -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
          -DCLANG_TOOL_LIBCLANG_BUILD=OFF

          ninja -t targets

          cmake --build . --target llvm-config llvm-tblgen clang-tblgen install
          cd $ROOT_DIR

          case "$BIRTH_OS" in
            windows) EXE_EXTENSION=".exe";;
            *) EXE_EXTENSION="";;
          esac

          # Install manually just these couple exes
          mkdir -p $INSTALL_DIRECTORY_PATH/bin
          cp build-llvm/bin/llvm-config$EXE_EXTENSION $INSTALL_DIRECTORY_PATH/bin
          cp build-llvm/bin/llvm-tblgen$EXE_EXTENSION $INSTALL_DIRECTORY_PATH/bin
          cp build-llvm/bin/clang-tblgen$EXE_EXTENSION $INSTALL_DIRECTORY_PATH/bin

          7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=64m -ms=on $LLVM_BASENAME.7z $INSTALL_DIRECTORY_PATH
          b2sum $LLVM_BASENAME.7z > "$LLVM_BASENAME.7z.b2sum"
          cat "$LLVM_BASENAME.7z.b2sum"
          LLVM_ASSET_BASE_PATH="$(pwd)/$LLVM_BASENAME"
          case "$BIRTH_OS" in
            windows) LLVM_ASSET_BASE_PATH="$(cygpath -w ${LLVM_ASSET_BASE_PATH})" ;;
            *) ;;
          esac
            
          echo "LLVM_ASSET_BASE_PATH=$LLVM_ASSET_BASE_PATH" >> $GITHUB_ENV
          echo "LLVM_BASENAME=$LLVM_BASENAME" >> $GITHUB_ENV

      - name: Upload LLVM artifact (7z)
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: ${{env.LLVM_BASENAME}}.7z
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: ${{env.LLVM_ASSET_BASE_PATH}}.7z
          compression-level: 9
          overwrite: true
          if-no-files-found: 'error'
      - name: Upload LLVM artifact (b2sum)
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: ${{env.LLVM_BASENAME}}.7z.b2sum
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: ${{env.LLVM_ASSET_BASE_PATH}}.7z.b2sum
          compression-level: 9
          overwrite: true
          if-no-files-found: 'error'
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{env.LLVM_BASENAME}}.7z
            ${{env.LLVM_BASENAME}}.7z.b2sum
